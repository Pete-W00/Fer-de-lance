# Understanding a decision tree
# NB EACH TIME THE CODE IS RAN YOU GET A DIFFERENT TREE - THE CODE BELOW WAS CORRECT FOR ONE VERSION OF THE TREE ONLY


# Setup

import sklearn
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

import matplotlib
from matplotlib import pyplot as plt

import seaborn as sns

df = sns.load_dataset("iris")


# Create decision tree model

X = df.drop(columns = "species")
y = df.species

DTC = DecisionTreeClassifier() 
DTC.fit(X, y)


# Visualise tree

plt.figure(figsize = (70, 70))

sklearn.tree.plot_tree(DTC, 
                       max_depth = None,                     # Advisable to change depth for a large tree 
                       feature_names = X.columns, 
                       class_names = True,                   # y[0] = setosa, y[1] = versicolor and y[2] = virginica 
                       label = 'all', 
                       filled = True, 
                       impurity = True, 
                       node_ids = True,                       
                       proportion = False, 
                       rounded = True, 
                       precision = 5, 
                       ax = None,
                       fontsize = 55)

plt.show()                                                   # True implies left fork (cannot assign labels to the arrows?)


# Analysis - how to get to each of the nine outputs (THIS ONLY WORKS FOR THE VERSION OF THE TREE THAT WAS OUTPUTTED FOR ME - CHANGE PARAMETERS FOR DIFFERENT TREES)

# Output one
# If petal_width <= 0.8 then the output should be 'setosa'
print(DTC.predict([[100.0, 100.0, 2.45, 0.7]]))   # 'setosa' 
print(DTC.predict([[0.0, 0.0, 2.45, 0.7]]))       # 'setosa'
print(DTC.predict([[1.0, 1.0, 2.45, 0.7]]))       # 'setosa'

# Output two
# If petal_width > 1.75 AND petal_length > 4.85 then the output should be 'virginica'
print(DTC.predict([[100.0, 100.0, 4.86, 1.76]]))  # virginica
print(DTC.predict([[0.0, 0.0, 4.86, 1.76]]))      # virginica 
print(DTC.predict([[1.0, 1.0, 4.86, 1.76]]))      # virginica

# Output three
# If petal_width > 1.75 AND petal_length <= 4.85 AND sepal_width <= 3.1 then the output should be 'virginica'
print(DTC.predict([[10.0, 3.00, 4.84, 1.76]]))    # virginica
print(DTC.predict([[0.0, 3.00, 4.84, 1.76]]))     # virginica 
print(DTC.predict([[5.0, 3.00, 4.84, 1.76]]))     # virginica  

# Output four
# If petal_width > 1.75 AND petal_length <= 4.85 AND sepal_width > 3.1 then the output should be 'versicolor'
print(DTC.predict([[10.0, 3.2, 4.84, 1.76]]))     # versicolor
print(DTC.predict([[0.0, 3.2, 4.84, 1.76]]))      # versicolor 
print(DTC.predict([[5.0, 3.2, 4.84, 1.76]]))      # versicolor  

# Output five
# If 0.8 < petal_width <= 1.65 AND petal_length <= 4.95 then the output should be 'versicolor'
print(DTC.predict([[10.0, 3.2, 4.94, 1.5]]))      # versicolor
print(DTC.predict([[0.0, 3.2, 4.94, 1.5]]))       # versicolor 
print(DTC.predict([[5.0, 3.2, 4.94, 1.5]]))       # versicolor  

# Output six
# If 1.65 < petal_width <= 1.75 AND petal_length <= 4.95 then the output should be 'virginica'
print(DTC.predict([[10.0, 3.2, 4.94, 1.7]]))      # virginica
print(DTC.predict([[0.0, 3.2, 4.94, 1.7]]))       # virginica 
print(DTC.predict([[5.0, 3.2, 4.94, 1.7]]))       # virginica 

# Output seven
# If 0.8 < petal_width <= 1.55 AND petal_length > 4.95 then the output should be 'virginica'
print(DTC.predict([[10.0, 3.2, 4.96, 1.2]]))      # virginica
print(DTC.predict([[0.0, 3.2, 4.96, 1.2]]))       # virginica 
print(DTC.predict([[5.0, 3.2, 4.96, 1.2]]))       # virginica 

# Output eight
# If 1.55 < petal_width <= 1.75 AND petal_length > 4.95 AND sepal_length <= 6.95 then the output should be 'versicolor'
print(DTC.predict([[6.95, 3.2, 4.96, 1.6]]))       # versicolor
print(DTC.predict([[6.95, 3.2, 4.96, 1.6]]))       # versicolor 
print(DTC.predict([[6.95, 3.2, 4.96, 1.6]]))       # versicolor 

# Output nine
# If 1.55 < petal_width <= 1.75 AND petal_length > 4.95 AND sepal_length > 6.95 then the output should be 'virginica'
print(DTC.predict([[6.98, 3.2, 4.98, 1.6]]))       # virginica
print(DTC.predict([[6.98, 3.2, 4.98, 1.6]]))       # virginica 
print(DTC.predict([[6.98, 3.2, 4.98, 1.6]]))       # virginica


# *** RESTARTING THE CODE CHANGES THE TREE - THE QUERIES ABOVE AND CONCLUSIONS BELOW WERE TRUE FOR ONE VERSION OF THE TREE ***
# 9 possible outputs from the tree
# No other permutations exist for this (small) tree
# petal width is the key variable to start with followed by petal length
# sepal data does not come into play until much further down the tree
# The maximum number of queries (question nodes) possible is 5
# No plant can call upon all four variables (petal width and length & sepal width and length) - maximum is three of these
